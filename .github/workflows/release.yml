name: Go Release

on:
  push:
    tags: ["v*"]  # This triggers the workflow on tag pushes starting with "v"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Ensure the workflow has write permissions for the contents scope

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Cache Go modules
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get the tag
      id: get_tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Generate version.go
      run: |
        VERSION=$(git describe --tags)-$(git rev-parse --short HEAD)
        echo "package main" > version.go
        echo >> version.go
        echo "const Version = \"$VERSION\"" >> version.go

    - name: Init mods
      run: go mod init gocommit.go

    - name: Build
      run: CGO_ENABLED=0 go build -v -o gocommit

    - name: Upload gocommit binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocommit
        path: gocommit

    - name: Check if release exists
      id: check_release
      run: |
        response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }})
        echo "$response"
        echo "::set-output name=exists::$(echo "$response" | jq -e .id > /dev/null && echo true || echo false)"
        echo "::set-output name=id::$(echo "$response" | jq -r .id)"
        echo "::set-output name=upload_url::$(echo "$response" | jq -r .upload_url)"

    - name: Create or update GitHub Release
      id: create_update_release
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "Release already exists. Updating..."
          release_id=${{ steps.check_release.outputs.id }}
          response=$(curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"tag_name": "${{ env.TAG_NAME }}", "name": "Release ${{ env.TAG_NAME }}", "draft": false, "prerelease": false}' \
          https://api.github.com/repos/${{ github.repository }}/releases/$release_id)
          echo "$response"
          echo "::set-output name=upload_url::$(echo "$response" | jq -r .upload_url)"
        else
          echo "Creating new release..."
          response=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"tag_name": "${{ env.TAG_NAME }}", "name": "Release ${{ env.TAG_NAME }}", "draft": false, "prerelease": false}' \
          https://api.github.com/repos/${{ github.repository }}/releases)
          echo "$response"
          echo "::set-output name=upload_url::$(echo "$response" | jq -r .upload_url)"
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.upload_url }}
        asset_path: ./gocommit
        asset_name: gocommit
        asset_content_type: application/octet-stream
